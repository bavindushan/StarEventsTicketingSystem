@model IEnumerable<StarEventsTicketingSystem.Models.ApplicationUser>

@{
    ViewData["Title"] = "Manage Users";
}

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark admin-navbar shadow-lg">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold text-white" asp-controller="Admin" asp-action="Dashboard">
            Admin Panel
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#adminNav" aria-controls="adminNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="adminNav">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Admin" asp-action="Dashboard"><i class="bi bi-speedometer2 me-1"></i> Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Admin" asp-action="ManageEvents"><i class="bi bi-calendar-event me-1"></i> Manage Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Admin" asp-action="ManageVenues"><i class="bi bi-building me-1"></i> Manage Venues</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Admin" asp-action="ManageUsers"><i class="bi bi-people me-1"></i> Manage Users</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Admin" asp-action="Reports"><i class="bi bi-graph-up-arrow me-1"></i> Reports</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Admin" asp-action="Settings"><i class="bi bi-gear me-1"></i> Settings</a>
                </li>
            </ul>
            <form method="post" asp-controller="Account" asp-action="Logout" class="d-flex">
                <button type="submit" class="btn btn-danger rounded-3 fw-semibold">
                    <i class="bi bi-box-arrow-right me-1"></i> Logout
                </button>
            </form>
        </div>
    </div>
</nav>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 p-4">

            <!-- Filter by Role -->
            <div class="mb-3">
                <label class="form-label text-warning">Select Role</label>
                <select id="roleFilter" class="form-select w-auto d-inline-block">
                    <option value="">All Roles</option>
                    @foreach (var role in ViewBag.Roles as List<Microsoft.AspNetCore.Identity.IdentityRole>)
                    {
                        <option value="@role.Name">@role.Name</option>
                    }
                </select>
                <button class="btn btn-primary ms-2" onclick="filterUsers()">Filter</button>
                <button class="btn btn-success ms-3" onclick="openAddAdminModal()">Add Admin</button>
            </div>

            <!-- Users Table -->
            <divc class="table-responsive glassy-table">
                <table class="table table-striped table-bordered" id="usersTable">
                    <thead class="table-light">
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersBody">
                        @foreach (var user in Model)
                        {
                            <tr data-user-id="@user.Id" onclick="viewUserDetails('@user.Id')">
                                <td>@user.FullName</td>
                                <td>@user.Email</td>
                                <td>@user.PhoneNumber</td>
                                <td>
                                    <button class="btn btn-sm btn-warning" onclick="event.stopPropagation(); editUser('@user.Id')">Edit</button>
                                    <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); deleteUser('@user.Id')">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </divc>
        </div>
    </div>
</div>

<!-- Add Admin Modal -->
<div class="modal fade" id="addAdminModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("CreateAdmin", "Admin", FormMethod.Post, new { @id = "addAdminForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Add Admin</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <input type="text" name="FullName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" name="Email" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="text" name="PhoneNumber" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" name="Password" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Create Admin</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Edit Admin Modal -->
<div class="modal fade" id="editAdminModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("EditUser", "Admin", FormMethod.Post, new { @id = "editAdminForm" }))
            {
                @Html.AntiForgeryToken()
                <input type="hidden" name="Id" id="editUserId" />
                <div class="modal-header">
                    <h5 class="modal-title">Edit Admin</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <input type="text" name="FullName" id="editFullName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" name="Email" id="editEmail" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="text" name="PhoneNumber" id="editPhoneNumber" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select name="Role" id="editRole" class="form-select">
                            @foreach (var role in ViewBag.Roles as List<Microsoft.AspNetCore.Identity.IdentityRole>)
                            {
                                <option value="@role.Name">@role.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">New Password (optional)</label>
                        <input type="password" name="NewPassword" id="editNewPassword" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Update</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Styles -->
<style>

    /* Glassy Table */
    .glassy-table {
        background: rgba(255, 255, 255, 0.12);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        overflow: hidden;
        color: #fff;
    }

        .glassy-table thead {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: #fff;
        }

        .glassy-table th,
        .glassy-table td {
            padding: 1rem;
            vertical-align: middle;
        }

        .glassy-table tbody tr:hover {
            background: rgba(255, 255, 255, 0.15);
            transition: 0.3s;
        }
    /* Navbar */
    .admin-navbar {
        background: rgba(255,255,255,0.08);
        backdrop-filter: blur(8px);
    }

        .admin-navbar .nav-link {
            font-weight: 500;
            transition: 0.3s;
        }

            .admin-navbar .nav-link:hover {
                background: rgba(255, 255, 255, 0.2);
                border-radius: 8px;
                transform: translateY(-2px);
            }

    /* Glassy Cards */
    .glassy-card {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(12px);
        border: none;
        border-radius: 1rem;
        transition: transform 0.3s ease;
        color: aliceblue;
    }

        .glassy-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

    .stat-card h4 {
        margin: 0;
        font-size: 2rem;
    }

    .card-header.bg-gradient {
        background: linear-gradient(135deg, #667eea, #764ba2);
    }
</style>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        // Show SweetAlert messages from TempData
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                    Swal.fire("Success!", "@TempData["SuccessMessage"]", "success");
            </text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                    Swal.fire("Error!", "@TempData["ErrorMessage"]", "error");
            </text>
        }

        async function filterUsers() {
            const role = document.getElementById("roleFilter").value;
            const response = await fetch(`/Admin/FilterUsers?role=${role}`);
            const users = await response.json();

            const tbody = document.getElementById("usersBody");
            tbody.innerHTML = "";

            if (users.length > 0) {
                users.forEach(u => {
                    const row = document.createElement("tr");
                    row.setAttribute("data-user-id", u.id);
                    row.onclick = () => viewUserDetails(u.id);
                    row.innerHTML = `
                        <td>${u.fullName}</td>
                        <td>${u.email}</td>
                        <td>${u.phoneNumber}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="event.stopPropagation(); editUser('${u.id}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); deleteUser('${u.id}')">Delete</button>
                        </td>`;
                    tbody.appendChild(row);
                });
            } else {
                tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No users found.</td></tr>`;
            }
        }

        function openAddAdminModal() {
            const modal = new bootstrap.Modal(document.getElementById('addAdminModal'));
            modal.show();
        }

                async function editUser(userId) {
            // Fetch user data
            const response = await fetch(`/Admin/GetUser?id=${userId}`);
            if (!response.ok) return;

            const user = await response.json();

            // Populate modal fields
            document.getElementById('editUserId').value = user.id;
            document.getElementById('editFullName').value = user.fullName;
            document.getElementById('editEmail').value = user.email;
            document.getElementById('editPhoneNumber').value = user.phoneNumber;
            document.getElementById('editRole').value = user.role;

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('editAdminModal'));
            modal.show();
        }

        function deleteUser(userId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    const token = $('input[name="__RequestVerificationToken"]').val(); // Anti-forgery token
                    const response = await fetch(`/Admin/DeleteUser?id=${userId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    });

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire('Deleted!', data.message, 'success');
                        // Remove row from table
                        document.querySelector(`tr[data-user-id="${userId}"]`).remove();
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                }
            });
        }

        async function viewUserDetails(userId) {
            try {
                const response = await fetch(`/Admin/GetUser?id=${userId}`);
                if (!response.ok) {
                    Swal.fire("Error", "Failed to fetch user details.", "error");
                    return;
                }

                const user = await response.json();

                // Example: show details in SweetAlert
                Swal.fire({
                    title: user.fullName,
                    html: `
                        <p><b>Email:</b> ${user.email}</p>
                        <p><b>Phone:</b> ${user.phoneNumber || "N/A"}</p>
                        <p><b>Role:</b> ${user.role}</p>
                        <p><b>Address:</b> ${user.address || "N/A"}</p>
                        <p><b>Created:</b> ${new Date(user.createdAt).toLocaleString()}</p>
                        <p><b>Updated:</b> ${new Date(user.updatedAt).toLocaleString()}</p>
                    `,
                    icon: "info"
                });

            } catch (err) {
                console.error("Error fetching user details:", err);
                Swal.fire("Error", "Something went wrong while fetching user details.", "error");
            }
        }
    </script>
}
